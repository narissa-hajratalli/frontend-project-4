{"remainingRequest":"/Users/narissa.k.hajratalli/Documents/GA-SEI/project-4-python-django/project-4/p4frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/narissa.k.hajratalli/Documents/GA-SEI/project-4-python-django/project-4/p4frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/narissa.k.hajratalli/Documents/GA-SEI/project-4-python-django/project-4/p4frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/narissa.k.hajratalli/Documents/GA-SEI/project-4-python-django/project-4/p4frontend/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&v-if=loggedIn&","dependencies":[{"path":"/Users/narissa.k.hajratalli/Documents/GA-SEI/project-4-python-django/project-4/p4frontend/src/views/Home.vue","mtime":1600533009952},{"path":"/Users/narissa.k.hajratalli/Documents/GA-SEI/project-4-python-django/project-4/p4frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narissa.k.hajratalli/Documents/GA-SEI/project-4-python-django/project-4/p4frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/narissa.k.hajratalli/Documents/GA-SEI/project-4-python-django/project-4/p4frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/narissa.k.hajratalli/Documents/GA-SEI/project-4-python-django/project-4/p4frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}